name: Deploy to Cloudflare

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '**.md'
      - '**/README.md'
      - '.gitignore'
      - '*.log'
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - master
    types: [closed]

jobs:
  deploy-worker:
    name: Deploy Worker
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: worker/package-lock.json
      
      - name: Install Worker dependencies
        working-directory: ./worker
        run: npm ci
      
      - name: Deploy Worker
        working-directory: ./worker
        run: npx wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Deployment status
        if: success()
        run: echo "‚úÖ Worker deployment completed successfully"
      
      - name: Deployment failed
        if: failure()
        run: echo "‚ùå Worker deployment failed"

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-worker
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Create .env.production
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" > .env.production
          echo "VITE_ADMIN_API_KEY=${{ secrets.VITE_ADMIN_API_KEY }}" >> .env.production
          echo "VITE_LINE_LIFF_ID=${{ secrets.VITE_LINE_LIFF_ID }}" >> .env.production
          echo "VITE_LINE_CHANNEL_ID=${{ secrets.VITE_LINE_CHANNEL_ID }}" >> .env.production
          echo "‚úÖ Environment variables created"
      
      - name: Verify environment variables
        run: |
          if [ -z "${{ secrets.VITE_API_BASE_URL }}" ]; then
            echo "‚ö†Ô∏è Warning: VITE_API_BASE_URL is not set"
          fi
          if [ -z "${{ secrets.VITE_LINE_LIFF_ID }}" ]; then
            echo "‚ö†Ô∏è Warning: VITE_LINE_LIFF_ID is not set"
          fi
          if [ -z "${{ secrets.VITE_LINE_CHANNEL_ID }}" ]; then
            echo "‚ö†Ô∏è Warning: VITE_LINE_CHANNEL_ID is not set"
          fi
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build failed: dist/index.html not found"
            exit 1
          fi
          # ‚úÖ ÈóúÈçµÈ©óË≠âÔºöÁ¢∫Ë™ç index.html ‰∏çÂåÖÂê´ index.tsx
          if grep -q "index.tsx" dist/index.html; then
            echo "‚ùå Build failed: dist/index.html still contains index.tsx (should be replaced with bundled JS)"
            echo "dist/index.html content:"
            cat dist/index.html
            exit 1
          fi
          # ‚úÖ Á¢∫Ë™çÂåÖÂê´ÊâìÂåÖÂæåÁöÑ JS Ê™îÊ°à
          if ! grep -q "assets/index-.*\.js" dist/index.html; then
            echo "‚ùå Build failed: dist/index.html does not contain bundled JS file"
            echo "dist/index.html content:"
            cat dist/index.html
            exit 1
          fi
          echo "‚úÖ Build output verified:"
          echo "  - dist/index.html exists"
          echo "  - dist/index.html contains bundled JS (no index.tsx)"
          ls -la dist/ | head -10
          echo "Assets directory:"
          ls -la dist/assets/ 2>/dev/null || echo "No assets directory"
      
      - name: Verify dist directory contents before deployment
        run: |
          echo "üì¶ Verifying dist directory contents:"
          echo "Files in dist/:"
          find dist -type f -maxdepth 2 | sort
          echo ""
          echo "Checking dist/index.html content:"
          head -n 80 dist/index.html | tail -n 10
          if grep -q "index.tsx" dist/index.html; then
            echo "‚ùå ERROR: dist/index.html still references index.tsx!"
            exit 1
          fi
          echo "‚úÖ dist/index.html correctly references bundled JS files"
      
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: booking-manager
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: '3'
      
      - name: Deployment status
        if: success()
        run: echo "‚úÖ Frontend deployment completed successfully"
      
      - name: Deployment failed
        if: failure()
        run: echo "‚ùå Frontend deployment failed"

